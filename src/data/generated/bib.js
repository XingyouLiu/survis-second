define({ entries : {
    "Barke2023GroundedCopilot": {
        "abstract": "Powered by recent advances in code-generating models, AI assistants like Github Copilot promise to change the face of programming forever. But what is this new face of programming? We present the first grounded theory analysis of how programmers interact with Copilot, based on observing 20 participants\u2014with a range of prior experience using the assistant\u2014as they solve diverse programming tasks across four languages. Our main finding is that interactions with programming assistants are bimodal: in acceleration mode, the programmer knows what to do next and uses Copilot to get there faster; in exploration mode, the programmer is unsure how to proceed and uses Copilot to explore their options. Based on our theory, we provide recommendations for improving the usability of future AI programming assistants.",
        "address": "New York, NY, USA",
        "articleno": "78",
        "author": "Barke, Shraddha and James, Michael B. and Polikarpova, Nadia",
        "doi": "10.1145/3586030",
        "issue_date": "April 2023",
        "journal": "Proc. ACM Program. Lang.",
        "keywords": "type:Interaction mechanics and strategies of coding assistance, AI Assistants, Grounded Theory, Program Synthesis",
        "month": "apr,",
        "number": "OOPSLA1",
        "numpages": "27",
        "publisher": "Association for Computing Machinery",
        "series": "OOPSLA '23",
        "title": "Grounded Copilot: How Programmers Interact with Code-Generating Models",
        "type": "article",
        "url": "https://doi.org/10.1145/3586030",
        "volume": "7",
        "year": "2023"
    },
    "Coutinho2024GenerativeAIRole": {
        "abstract": "With software development increasingly reliant on innovative technologies, there is a growing interest in exploring the potential of generative AI tools to streamline processes and enhance productivity. In this scenario, this paper investigates the integration of generative AI tools within software development, focusing on understanding their uses, benefits, and challenges to software professionals, in particular, looking at aspects of productivity. Through a pilot case study involving software practitioners working in different roles, we gathered valuable experiences on the integration of generative AI tools into their daily work routines. Our findings reveal a generally positive perception of these tools in individual productivity while also highlighting the need to address identified limitations. Overall, our research sets the stage for further exploration into the evolving landscape of software development practices with the integration of generative AI tools.",
        "address": "New York, NY, USA",
        "author": "Coutinho, Mariana and Marques, Lorena and Santos, Anderson and Dahia, Marcio and Fran\\c{c}a, Cesar and de Souza Santos, Ronnie",
        "booktitle": "Proceedings of the 1st ACM International Conference on AI-Powered Software",
        "doi": "10.1145/3664646.3664773",
        "isbn": "9798400706851",
        "keywords": "type:Impact and perceived value of coding assistance, LLMs, generative AI, productivity, software engineering",
        "location": "Porto de Galinhas, Brazil",
        "numpages": "8",
        "pages": "131\u2013138",
        "publisher": "Association for Computing Machinery",
        "series": "AIware 2024",
        "title": "The Role of Generative AI in Software Development Productivity: A Pilot Case Study",
        "type": "inproceedings",
        "url": "https://doi.org/10.1145/3664646.3664773",
        "year": "2024"
    },
    "Davila2024IndustryCaseStudy": {
        "author": "Davila, Nicole and Wiese, Igor and Steinmacher, Igor and Da Silva, Lucas Lucio and Kawamoto, Andr\u00e9 and Peres Favaro, Gilson Jos\u00e9 and Nunes, Ingrid",
        "booktitle": "2024 IEEE/ACM 46th International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)",
        "doi": "10.1145/3639477.3643648",
        "keywords": "type:Adoption and usability of coding assistance, Industries;Surveys;Computer languages;Programming;Syntactics;Chatbots;Software;Artificial Intelligence;Generative AI;ChatGPT;Industry Case Study;Software Development",
        "number": "",
        "pages": "92-102",
        "series": "ICSE-SEIP '24",
        "title": "An Industry Case Study on Adoption of AI-based Programming Assistants",
        "type": "INPROCEEDINGS",
        "volume": "",
        "year": "2024"
    },
    "Kazemitabaar2024NovicesLLM": {
        "abstract": "As Large Language Models (LLMs) gain in popularity, it is important to understand how novice programmers use them and the effect they have on learning to code. We present the results of a thematic analysis on a data set from 33 learners, aged 10-17, as they independently learned Python by working on 45 code-authoring tasks with access to an AI Code Generator based on OpenAI Codex. We explore several important questions related to how learners used LLM-based AI code generators, and provide an analysis of the properties of the written prompts and the resulting AI generated code. Specifically, we explore (A) the context in which learners use Codex, (B) what learners are asking from Codex in terms of syntax and logic, (C) properties of prompts written by learners in terms of relation to task description, language, clarity, and prompt crafting patterns, (D) properties of the AI-generated code in terms of correctness, complexity, and accuracy, and (E) how learners utilize AI-generated code in terms of placement, verification, and manual modifications. Furthermore, our analysis reveals four distinct coding approaches when writing code with an AI code generator: AI Single Prompt, where learners prompted Codex once to generate the entire solution to a task; AI Step-by-Step, where learners divided the problem into parts and used Codex to generate each part; Hybrid, where learners wrote some of the code themselves and used Codex to generate others; and Manual coding, where learners wrote the code themselves. Our findings reveal consistently positive trends between learners\u2019 utilization of the Hybrid coding approach and their post-test evaluation scores, while showing consistent negative trends between the AI Single Prompt and the post-test evaluation scores. Furthermore, we offer insights into novice learners\u2019 use of AI code generators in a self-paced learning environment, highlighting signs of over-reliance, self-regulation, and opportunities for enhancing AI-assisted learning tools.",
        "address": "New York, NY, USA",
        "articleno": "3",
        "author": "Kazemitabaar, Majeed and Hou, Xinying and Henley, Austin and Ericson, Barbara Jane and Weintrop, David and Grossman, Tovi",
        "booktitle": "Proceedings of the 23rd Koli Calling International Conference on Computing Education Research",
        "doi": "10.1145/3631802.3631806",
        "isbn": "9798400716539",
        "keywords": "type:Interaction mechanics and strategies of coding assistance, ChatGPT, Copilot, Introductory Programming, Large Language Models, OpenAI Codex, Self-paced Learning, Self-regulation",
        "location": "Koli, Finland",
        "numpages": "12",
        "publisher": "Association for Computing Machinery",
        "series": "Koli Calling '23",
        "title": "How Novices Use LLM-based Code Generators to Solve CS1 Coding Tasks in a Self-Paced Learning Environment",
        "type": "inproceedings",
        "url": "https://doi.org/10.1145/3631802.3631806",
        "year": "2024"
    },
    "Liang2024LargeScaleSurvey": {
        "abstract": "The software engineering community recently has witnessed widespread deployment of AI programming assistants, such as GitHub Copilot. However, in practice, developers do not accept AI programming assistants' initial suggestions at a high frequency. This leaves a number of open questions related to the usability of these tools. To understand developers' practices while using these tools and the important usability challenges they face, we administered a survey to a large population of developers and received responses from a diverse set of 410 developers. Through a mix of qualitative and quantitative analyses, we found that developers are most motivated to use AI programming assistants because they help developers reduce key-strokes, finish programming tasks quickly, and recall syntax, but resonate less with using them to help brainstorm potential solutions. We also found the most important reasons why developers do not use these tools are because these tools do not output code that addresses certain functional or non-functional requirements and because developers have trouble controlling the tool to generate the desired output. Our findings have implications for both creators and users of AI programming assistants, such as designing minimal cognitive effort interactions with these tools to reduce distractions for users while they are programming.",
        "address": "New York, NY, USA",
        "articleno": "52",
        "author": "Liang, Jenny T. and Yang, Chenyang and Myers, Brad A.",
        "booktitle": "Proceedings of the IEEE/ACM 46th International Conference on Software Engineering",
        "doi": "10.1145/3597503.3608128",
        "isbn": "9798400702174",
        "keywords": "type:Adoption and usability of coding assistance, AI programming assistants, usability study",
        "location": "Lisbon, Portugal",
        "numpages": "13",
        "publisher": "Association for Computing Machinery",
        "series": "ICSE '24",
        "title": "A Large-Scale Survey on the Usability of AI Programming Assistants: Successes and Challenges",
        "type": "inproceedings",
        "url": "https://doi.org/10.1145/3597503.3608128",
        "year": "2024"
    },
    "Mendes2024BicycleMotor": {
        "abstract": "AI code assistants, such as Tabnine, GitHub CoPilot, and ChatGPT, employ Large Language Models (LLMs) trained on extensive source code and other documents. They receive prompts and generate code suggestions aimed to facilitate programming tasks. Previous research in this field has explored the correctness, complexity, quality, and security of the code suggestions. Software developers' experiences have been studied in the context of controlled experiments. Based on 14 interviews with software developers, this paper describes the developers' daily and continuous experiences with AI code assistants, presenting benefits and challenges grounded in actual development work, along with strategies to address these challenges.",
        "address": "New York, NY, USA",
        "author": "Mendes, Wendy and Souza, Samara and De Souza, Cleidson",
        "booktitle": "Proceedings of the 2024 IEEE/ACM 17th International Conference on Cooperative and Human Aspects of Software Engineering",
        "doi": "10.1145/3641822.3641882",
        "isbn": "9798400705335",
        "keywords": "type:Adoption and usability of coding assistance, AI code assistants, developer experiences, code generation",
        "location": "Lisbon, Portugal",
        "numpages": "9",
        "pages": "144\u2013152",
        "publisher": "Association for Computing Machinery",
        "series": "CHASE '24",
        "title": "\"You're on a bicycle with a little motor\": Benefits and Challenges of Using AI Code Assistants",
        "type": "inproceedings",
        "url": "https://doi.org/10.1145/3641822.3641882",
        "year": "2024"
    },
    "Mozannar2024ReadingLines": {
        "abstract": "Code-recommendation systems, such as Copilot and CodeWhisperer, have the potential to improve programmer productivity by suggesting and auto-completing code. However, to fully realize their potential, we must understand how programmers interact with these systems and identify ways to improve that interaction. To seek insights about human-AI collaboration with code recommendations systems, we studied GitHub Copilot, a code-recommendation system used by millions of programmers daily. We developed CUPS, a taxonomy of common programmer activities when interacting with Copilot. Our study of 21 programmers, who completed coding tasks and retrospectively labeled their sessions with CUPS, showed that CUPS can help us understand how programmers interact with code-recommendation systems, revealing inefficiencies and time costs. Our insights reveal how programmers interact with Copilot and motivate new interface designs and metrics.",
        "address": "New York, NY, USA",
        "articleno": "142",
        "author": "Mozannar, Hussein and Bansal, Gagan and Fourney, Adam and Horvitz, Eric",
        "booktitle": "Proceedings of the 2024 CHI Conference on Human Factors in Computing Systems",
        "doi": "10.1145/3613904.3641936",
        "isbn": "9798400703300",
        "keywords": "type:Interaction mechanics and strategies of coding assistance, AI-assisted Programming, Copilot, User State Model",
        "location": "Honolulu, HI, USA",
        "numpages": "16",
        "publisher": "Association for Computing Machinery",
        "series": "CHI '24",
        "title": "Reading Between the Lines: Modeling User Behavior and Costs in AI-Assisted Programming",
        "type": "inproceedings",
        "url": "https://doi.org/10.1145/3613904.3641936",
        "year": "2024"
    },
    "Nguyen2024HowBeginnersMisread": {
        "abstract": "Generative AI models, specifically large language models (LLMs), have made strides towards the long-standing goal of text-to-code generation. This progress has invited numerous studies of user interaction. However, less is known about the struggles and strategies of non-experts, for whom each step of the text-to-code problem presents challenges: describing their intent in natural language, evaluating the correctness of generated code, and editing prompts when the generated code is incorrect. This paper presents a large-scale controlled study of how 120 beginning coders across three academic institutions approach writing and editing prompts. A novel experimental design allows us to target specific steps in the text-to-code process and reveals that beginners struggle with writing and editing prompts, even for problems at their skill level and when correctness is automatically determined. Our mixed-methods evaluation provides insight into student processes and perceptions with key implications for non-expert Code LLM use within and outside of education.",
        "address": "New York, NY, USA",
        "articleno": "651",
        "author": "Nguyen, Sydney and Babe, Hannah McLean and Zi, Yangtian and Guha, Arjun and Anderson, Carolyn Jane and Feldman, Molly Q",
        "booktitle": "Proceedings of the 2024 CHI Conference on Human Factors in Computing Systems",
        "doi": "10.1145/3613904.3642706",
        "isbn": "9798400703300",
        "keywords": "type:Interaction mechanics and strategies of coding assistance",
        "location": "Honolulu, HI, USA",
        "numpages": "26",
        "publisher": "Association for Computing Machinery",
        "series": "CHI '24",
        "title": "How Beginning Programmers and Code LLMs (Mis)read Each Other",
        "type": "inproceedings",
        "url": "https://doi.org/10.1145/3613904.3642706",
        "year": "2024"
    },
    "Sergeyuk2025UsingAIAssistants": {
        "abstract": "Context: The last several years saw the emergence of AI assistants for code \u2014 multi-purpose AI-based helpers in software engineering. As they become omnipresent in all aspects of software development, it becomes critical to understand their usage patterns. Objective: We aim to better understand how specifically developers are using AI assistants, why they are not using them in certain parts of their development workflow, and what needs to be improved in the future. Methods: In this work, we carried out a large-scale survey aimed at how AI assistants are used, focusing on specific software development activities and stages. We collected opinions of 481 programmers on five broad activities: (a) implementing new features, (b) writing tests, (c) bug triaging, (d) refactoring, and (e) writing natural-language artifacts, as well as their individual stages. Results: Our results provide a novel comparison of different stages where AI assistants are used that is both comprehensive and detailed. It highlights specific activities that developers find less enjoyable and want to delegate to an AI assistant, e.g., writing tests and natural-language artifacts. We also determine more granular stages where AI assistants are used, such as generating tests and generating docstrings, as well as less studied parts of the workflow, such as generating test data. Among the reasons for not using assistants, there are general aspects like trust and company policies, as well as more concrete issues like the lack of project-size context, which can be the focus of the future research. Conclusion: The provided analysis highlights stages of software development that developers want to delegate and that are already popular for using AI assistants, which can be a good focus for features aimed to help developers right now. The main reasons for not using AI assistants can serve as a guideline for future work.",
        "author": "Agnia Sergeyuk and Yaroslav Golubev and Timofey Bryksin and Iftekhar Ahmed",
        "doi": "https://doi.org/10.1016/j.infsof.2024.107610",
        "issn": "0950-5849",
        "journal": "Information and Software Technology",
        "keywords": "type:Adoption and usability of coding assistance, LLMs, AI assistants, Software development lifecycle",
        "pages": "107610",
        "series": "Information and Software Technology",
        "title": "Using AI-based coding assistants in practice: State of affairs, perceptions, and ways forward",
        "type": "article",
        "url": "https://www.sciencedirect.com/science/article/pii/S0950584924002155",
        "volume": "178",
        "year": "2025"
    },
    "Weisz2025ExaminingUseImpact": {
        "abstract": "AI assistants are being created to help software engineers conduct a variety of coding-related tasks, such as writing, documenting, and testing code. We describe the use of the watsonx Code Assistant (WCA), an LLM-powered coding assistant deployed internally within IBM. Through surveys of two user cohorts (N",
        "address": "New York, NY, USA",
        "articleno": "673",
        "author": "Weisz, Justin D. and Kumar, Shraddha Vijay and Muller, Michael and Browne, Karen-Ellen and Goldberg, Arielle and Heintze, Katrin Ellice and Bajpai, Shagun",
        "booktitle": "Proceedings of the Extended Abstracts of the CHI Conference on Human Factors in Computing Systems",
        "doi": "10.1145/3706599.3706670",
        "isbn": "9798400713958",
        "keywords": "type:Impact and perceived value of coding assistance, Generative AI, LLM, software engineering, productivity, code assistant",
        "location": " ,",
        "numpages": "13",
        "publisher": "Association for Computing Machinery",
        "series": "CHI EA '25",
        "title": "Examining the Use and Impact of an AI Code Assistant on Developer Productivity and Experience in the Enterprise",
        "type": "inproceedings",
        "url": "https://doi.org/10.1145/3706599.3706670",
        "year": "2025"
    }
}});